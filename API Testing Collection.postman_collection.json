{
	"info": {
		"_postman_id": "007933ec-449b-4cca-ba7c-a35822db87a6",
		"name": "New Collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	
							
							"var response_json = pm.response.json();",
							"",
							"pm.test(\"Verify the Paginagtion settings \", function () {",
							"   pm.expect(response_json.pagination.limit).to.eql(25);",
							"   pm.expect(response_json.pagination.offset).to.eql(0);",
							"   pm.expect(response_json.pagination.count).to.eql(25);",
							"   pm.expect(response_json.pagination.total).to.eql(10000);",
							"});",
							"",
							"pm.test(\"Verify the data exists \", function () {",
							"   pm.expect(response_json.data.length).is.not.null;",
							"  ",
							"});",
							"",
							"",
							"",
							"postman.setNextRequest(\"[Live_News]Verify error message for wrong API key\");",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}?access_key={{api_key}}",
					"host": [
						"{{url}}"
					],
					"query": [
						{
							"key": "access_key",
							"value": "{{api_key}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "[Live_News]Verify error message for wrong API key",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"",
							"pm.test(\"Status code is 401 : Unauthorized\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							" var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
							" ",
							" tests[\"Verify Content-Type\"] = contentTypeHeaderExists;",
							" ",
							" if (contentTypeHeaderExists) {",
							"     tests[\"Verify Content-Type is application/json\"] = ",
							"       responseHeaders[\"Content-Type\"].has(\"application/json\");",
							" }",
							"",
							"",
							"var response_json = pm.response.json();",
							"",
							"pm.test(\"Verify the error code for invalid access key \", function () {",
							"   pm.expect(response_json.error.code).to.eql(\"invalid_access_key\");",
							"});",
							"",
							"pm.test(\"Verify the error message for invalid access key \", function () {",
							"   pm.expect(response_json.error.message).to.eql(\"You have not supplied a valid API Access Key.\");",
							"});",
							"",
							"postman.setNextRequest(\"[Live_News]Verify error message for without API key\");",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}?access_key=eedewdw",
					"host": [
						"{{url}}"
					],
					"query": [
						{
							"key": "access_key",
							"value": "eedewdw"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "[Live_News]Verify error message for without API key",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"",
							"pm.test(\"Status code is 401 : Unauthorized\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							" var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
							" ",
							" tests[\"Verify Content-Type\"] = contentTypeHeaderExists;",
							" ",
							" if (contentTypeHeaderExists) {",
							"     tests[\"Verify Content-Type is application/json\"] = ",
							"       responseHeaders[\"Content-Type\"].has(\"application/json\");",
							" }",
							"",
							"",
							"var response_json = pm.response.json();",
							"",
							"",
							"pm.test(\"Verify the error code for invalid access key \", function () {",
							"   pm.expect(response_json.error.code).to.eql(\"missing_access_key\");",
							"});",
							"",
							"pm.test(\"Verify the error message for invalid access key \", function () {",
							"   pm.expect(response_json.error.message).to.eql(\"You have not supplied an API Access Key. [Required format: access_key=YOUR_ACCESS_KEY]\");",
							"});",
							"",
							"",
							"postman.setNextRequest(\"[Live_News]Verify response by include filter from country\");",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}",
					"host": [
						"{{url}}"
					],
					"query": [
						{
							"key": "access_key",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "[Live_News]Verify response by include filter from country",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							" var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
							" ",
							" tests[\"Verify Content-Type\"] = contentTypeHeaderExists;",
							" ",
							" if (contentTypeHeaderExists) {",
							"     tests[\"Verify Content-Type is application/json\"] = ",
							"       responseHeaders[\"Content-Type\"].has(\"application/json\");",
							" }",
							"",
							"",
							"var response_json = pm.response.json();",
							"",
							"pm.test(\"Verify the Paginagtion settings \", function () {",
							"   pm.expect(response_json.pagination.limit).to.eql(25);",
							"   pm.expect(response_json.pagination.offset).to.eql(0);",
							"   pm.expect(response_json.pagination.count).to.eql(25);",
							"   pm.expect(response_json.pagination.total).to.eql(10000);",
							"});",
							"",
							"",
							"var no_of_records = response_json.data.length;",
							"",
							" for (var i = 0; i < no_of_records; i++){",
							"       pm.test(\"Verify the country code of all data is AU \", function () {",
							"         pm.expect(response_json.data[i].country).to.eql(\"au\");",
							"  ",
							"        });",
							" }",
							"",
							" postman.setNextRequest(\"[Live_News]Verify response by exclude filter from country\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}?access_key={{api_key}}&countries=au",
					"host": [
						"{{url}}"
					],
					"query": [
						{
							"key": "access_key",
							"value": "{{api_key}}"
						},
						{
							"key": "countries",
							"value": "au"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "[Live_News]Verify response by exclude filter from country",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							" var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
							" ",
							" tests[\"Verify Content-Type\"] = contentTypeHeaderExists;",
							" ",
							" if (contentTypeHeaderExists) {",
							"     tests[\"Verify Content-Type is application/json\"] = ",
							"       responseHeaders[\"Content-Type\"].has(\"application/json\");",
							" }",
							"",
							"",
							"var response_json = pm.response.json();",
							"",
							"pm.test(\"Verify the Paginagtion settings \", function () {",
							"   pm.expect(response_json.pagination.limit).to.eql(25);",
							"   pm.expect(response_json.pagination.offset).to.eql(0);",
							"   pm.expect(response_json.pagination.count).to.eql(25);",
							"   pm.expect(response_json.pagination.total).to.eql(10000);",
							"});",
							"",
							"",
							"var no_of_records = response_json.data.length;",
							"",
							" for (var i = 0; i < no_of_records; i++){",
							"       pm.test(\"Verify the country code is not AU for any data\", function () {",
							"            pm.expect(response_json.data[i].country).not.to.eql(\"au\");",
							"  ",
							"        });",
							" }",
							"",
							" postman.setNextRequest(\"[Live_News]Verify error response for invalid country code\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}?access_key={{api_key}}&countries=-au",
					"host": [
						"{{url}}"
					],
					"query": [
						{
							"key": "access_key",
							"value": "{{api_key}}"
						},
						{
							"key": "countries",
							"value": "-au"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "[Live_News]Verify error response for invalid country code",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"",
							"pm.test(\"Status code is 401 : Unauthorized\", function () {",
							"    pm.response.to.have.status(422);",
							"});",
							"",
							" var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
							" ",
							" tests[\"Verify Content-Type\"] = contentTypeHeaderExists;",
							" ",
							" if (contentTypeHeaderExists) {",
							"     tests[\"Verify Content-Type is application/json\"] = ",
							"       responseHeaders[\"Content-Type\"].has(\"application/json\");",
							" }",
							"",
							"",
							"var response_json = pm.response.json();",
							"",
							"",
							"pm.test(\"Verify the error code for invalid country code \", function () {",
							"     pm.expect(response_json.error.code).to.eql(\"validation_error\");",
							"});",
							"",
							"pm.test(\"Verify the error message for invalid country code \", function () {",
							"   pm.expect(response_json.error.message).to.eql(\"Request failed with validation error\");",
							"});",
							"",
							"",
							"postman.setNextRequest(\"[Live_News]Verify response by include filter from language\");",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}?access_key={{api_key}}&countries=dwdwdwdw",
					"host": [
						"{{url}}"
					],
					"query": [
						{
							"key": "access_key",
							"value": "{{api_key}}"
						},
						{
							"key": "countries",
							"value": "dwdwdwdw"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "[Live_News]Verify response by include filter from language",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							" var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
							" ",
							" tests[\"Verify Content-Type\"] = contentTypeHeaderExists;",
							" ",
							" if (contentTypeHeaderExists) {",
							"     tests[\"Verify Content-Type is application/json\"] = ",
							"       responseHeaders[\"Content-Type\"].has(\"application/json\");",
							" }",
							"",
							"",
							"var response_json = pm.response.json();",
							"",
							"pm.test(\"Verify the Paginagtion settings \", function () {",
							"   pm.expect(response_json.pagination.limit).to.eql(25);",
							"   pm.expect(response_json.pagination.offset).to.eql(0);",
							"   pm.expect(response_json.pagination.count).to.eql(25);",
							"   pm.expect(response_json.pagination.total).to.eql(3767);",
							"});",
							"",
							"",
							"var no_of_records = response_json.data.length;",
							"",
							" for (var i = 0; i < no_of_records; i++){",
							"       pm.test(\"Verify the language code of all data is AR \", function () {",
							"         pm.expect(response_json.data[i].language).to.eql(\"ar\");",
							"  ",
							"        });",
							" }",
							"",
							" postman.setNextRequest(\"[Live_News]Verify response by exclude filter from language\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}?access_key={{api_key}}&languages=ar",
					"host": [
						"{{url}}"
					],
					"query": [
						{
							"key": "access_key",
							"value": "{{api_key}}"
						},
						{
							"key": "languages",
							"value": "ar"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "[Live_News]Verify response by exclude filter from language",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							" var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
							" ",
							" tests[\"Verify Content-Type\"] = contentTypeHeaderExists;",
							" ",
							" if (contentTypeHeaderExists) {",
							"     tests[\"Verify Content-Type is application/json\"] = ",
							"       responseHeaders[\"Content-Type\"].has(\"application/json\");",
							" }",
							"",
							"",
							"var response_json = pm.response.json();",
							"",
							"pm.test(\"Verify the Paginagtion settings \", function () {",
							"   pm.expect(response_json.pagination.limit).to.eql(25);",
							"   pm.expect(response_json.pagination.offset).to.eql(0);",
							"   pm.expect(response_json.pagination.count).to.eql(25);",
							"   pm.expect(response_json.pagination.total).to.eql(10000);",
							"});",
							"",
							"",
							"var no_of_records = response_json.data.length;",
							"",
							" for (var i = 0; i < no_of_records; i++){",
							"       pm.test(\"Verify the language code is not equal to AR in any data of the set\", function () {",
							"            pm.expect(response_json.data[i].language).not.to.eql(\"ar\");",
							"  ",
							"        });",
							" }",
							"",
							" postman.setNextRequest(\"[Live_News]Verify response by include filter from source\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}?access_key={{api_key}}&languages=-ar",
					"host": [
						"{{url}}"
					],
					"query": [
						{
							"key": "access_key",
							"value": "{{api_key}}"
						},
						{
							"key": "languages",
							"value": "-ar"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "[Live_News]Verify response by include filter from source",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							" var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
							" ",
							" tests[\"Verify Content-Type\"] = contentTypeHeaderExists;",
							" ",
							" if (contentTypeHeaderExists) {",
							"     tests[\"Verify Content-Type is application/json\"] = ",
							"       responseHeaders[\"Content-Type\"].has(\"application/json\");",
							" }",
							"",
							"",
							"var response_json = pm.response.json();",
							"",
							"pm.test(\"Verify the Paginagtion settings \", function () {",
							"   pm.expect(response_json.pagination.limit).to.eql(25);",
							"   pm.expect(response_json.pagination.offset).to.eql(0);",
							"   pm.expect(response_json.pagination.count).to.eql(25);",
							"   pm.expect(response_json.pagination.total).to.eql(10000);",
							"});",
							"",
							"",
							"var no_of_records = response_json.data.length;",
							"",
							" for (var i = 0; i < no_of_records; i++){",
							"       pm.test(\"Verify the source  of all data is CNN \", function () {",
							"         pm.expect(response_json.data[i].source).is.include(\"CNN\");",
							"  ",
							"        });",
							" }",
							"",
							" postman.setNextRequest(\"[Live_News]Verify response by exclude filter from source\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}?access_key={{api_key}}&sources=cnn",
					"host": [
						"{{url}}"
					],
					"query": [
						{
							"key": "access_key",
							"value": "{{api_key}}"
						},
						{
							"key": "sources",
							"value": "cnn"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "[Live_News]Verify response by exclude filter from source",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							" var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
							" ",
							" tests[\"Verify Content-Type\"] = contentTypeHeaderExists;",
							" ",
							" if (contentTypeHeaderExists) {",
							"     tests[\"Verify Content-Type is application/json\"] = ",
							"       responseHeaders[\"Content-Type\"].has(\"application/json\");",
							" }",
							"",
							"var response_json = pm.response.json();",
							"",
							"pm.test(\"Verify the Paginagtion settings \", function () {",
							"   pm.expect(response_json.pagination.limit).to.eql(25);",
							"   pm.expect(response_json.pagination.offset).to.eql(0);",
							"   pm.expect(response_json.pagination.count).to.eql(25);",
							"   pm.expect(response_json.pagination.total).to.eql(10000);",
							"});",
							"",
							"",
							"var no_of_records = response_json.data.length;",
							"",
							" for (var i = 0; i < no_of_records; i++){",
							"       pm.test(\"Verify the source is not equal to CNN in any data in the set\", function () {",
							"            pm.expect(response_json.data[i].source).not.to.eql(\"bbc\");",
							"  ",
							"        });",
							" }",
							"",
							" postman.setNextRequest(\"[Live_News]Verify response with date filter\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}?access_key={{api_key}}&sources=-bbc",
					"host": [
						"{{url}}"
					],
					"query": [
						{
							"key": "access_key",
							"value": "{{api_key}}"
						},
						{
							"key": "sources",
							"value": "-bbc"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "[Live_News]Verify response with date filter",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							" var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
							" ",
							" tests[\"Verify Content-Type\"] = contentTypeHeaderExists;",
							" ",
							" if (contentTypeHeaderExists) {",
							"     tests[\"Verify Content-Type is application/json\"] = ",
							"       responseHeaders[\"Content-Type\"].has(\"application/json\");",
							" }",
							"",
							"",
							"var response_json = pm.response.json();",
							"",
							"pm.test(\"Verify the Paginagtion settings \", function () {",
							"   pm.expect(response_json.pagination.limit).to.eql(25);",
							"   pm.expect(response_json.pagination.offset).to.eql(0);",
							"   pm.expect(response_json.pagination.count).to.eql(25);",
							"   pm.expect(response_json.pagination.total).to.eql(10000);",
							"});",
							"",
							"",
							"var no_of_records = response_json.data.length;",
							"",
							" for (var i = 0; i < no_of_records; i++){",
							"       pm.test(\"Verify the data set if filtered from published date 2022-01-30\", function () {",
							"            pm.expect(response_json.data[i].published_at).to.include(\"2022-01-30\");",
							"  ",
							"        });",
							" }",
							"",
							" postman.setNextRequest(\"[Live_News]Verify response by include filter from category\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}?access_key={{api_key}}&date=2022-01-30",
					"host": [
						"{{url}}"
					],
					"query": [
						{
							"key": "access_key",
							"value": "{{api_key}}"
						},
						{
							"key": "date",
							"value": "2022-01-30"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "[Live_News]Verify response by include filter from category",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							" var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
							" ",
							" tests[\"Verify Content-Type\"] = contentTypeHeaderExists;",
							" ",
							" if (contentTypeHeaderExists) {",
							"     tests[\"Verify Content-Type is application/json\"] = ",
							"       responseHeaders[\"Content-Type\"].has(\"application/json\");",
							" }",
							"",
							"",
							"var response_json = pm.response.json();",
							"var no_of_records = response_json.data.length;",
							"",
							" for (var i = 0; i < no_of_records; i++){",
							"       pm.test(\"Verify the category  of all data is health \", function () {",
							"         pm.expect(response_json.data[i].category).to.eql(\"health\");",
							"  ",
							"        });",
							" }",
							"",
							"",
							"postman.setNextRequest(\"[Live_News]Verify response by exclude filter from category\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}?access_key={{api_key}}&categories=health",
					"host": [
						"{{url}}"
					],
					"query": [
						{
							"key": "access_key",
							"value": "{{api_key}}"
						},
						{
							"key": "categories",
							"value": "health"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "[Live_News]Verify response by exclude filter from category",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							" var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
							" ",
							" tests[\"Verify Content-Type\"] = contentTypeHeaderExists;",
							" ",
							" if (contentTypeHeaderExists) {",
							"     tests[\"Verify Content-Type is application/json\"] = ",
							"       responseHeaders[\"Content-Type\"].has(\"application/json\");",
							" }",
							"",
							"",
							"var response_json = pm.response.json();",
							"var no_of_records = response_json.data.length;",
							"",
							"for (var i = 0; i < no_of_records; i++){",
							"       pm.test(\"Verify there is no data from health category\", function () {",
							"            pm.expect(response_json.data[i].category).not.to.eql(\"health\");",
							"  ",
							"        });",
							" }",
							"",
							"",
							"postman.setNextRequest(\"[Live_News]Verify error response for invalid category\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}?access_key={{api_key}}&categories=-health",
					"host": [
						"{{url}}"
					],
					"query": [
						{
							"key": "access_key",
							"value": "{{api_key}}"
						},
						{
							"key": "categories",
							"value": "-health"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "[Live_News]Verify error response for invalid category",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(422);",
							"});",
							"",
							" var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
							" ",
							" tests[\"Verify Content-Type\"] = contentTypeHeaderExists;",
							" ",
							" if (contentTypeHeaderExists) {",
							"     tests[\"Verify Content-Type is application/json\"] = ",
							"       responseHeaders[\"Content-Type\"].has(\"application/json\");",
							" }",
							"",
							"",
							"var response_json = pm.response.json();",
							"var tz = pm.response.json();",
							"",
							"pm.test(\"Verify the error code for invalid category type\", function () {",
							"     pm.expect(response_json.error.code).to.eql(\"validation_error\");",
							"});",
							"",
							"pm.test(\"Verify the error message for invalid category type\", function () {",
							"   pm.expect(response_json.error.message).to.eql(\"Request failed with validation error\");",
							"});",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://api.mediastack.com/v1/news?access_key={{api_key}}&categories=dwdwd",
					"protocol": "http",
					"host": [
						"api",
						"mediastack",
						"com"
					],
					"path": [
						"v1",
						"news"
					],
					"query": [
						{
							"key": "access_key",
							"value": "{{api_key}}"
						},
						{
							"key": "categories",
							"value": "dwdwd"
						}
					]
				}
			},
			"response": []
		}
	]
}
