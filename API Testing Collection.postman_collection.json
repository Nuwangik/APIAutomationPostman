{
	"info": {
		"_postman_id": "007933ec-449b-4cca-ba7c-a35822db87a6",
		"name": "New Collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "[Live_News]Verify api receive data with valid API key",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							" var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
							" ",
							" tests[\"Verify Content-Type\"] = contentTypeHeaderExists;",
							" ",
							" if (contentTypeHeaderExists) {",
							"     tests[\"Verify Content-Type is application/json\"] = ",
							"       responseHeaders[\"Content-Type\"].has(\"application/json\");",
							" }",
							"",
							"",
							"var schema = {",
							"    \"$schema\": \"http://json-schema.org/draft-07/schema\",",
							"    \"$id\": \"http://example.com/example.json\",",
							"    \"type\": \"object\",",
							"    \"title\": \"The root schema\",",
							"    \"description\": \"The root schema comprises the entire JSON document.\",",
							"    \"default\": {},",
							"    \"required\": [",
							"        \"pagination\",",
							"        \"data\"",
							"    ],",
							"    \"properties\": {",
							"        \"pagination\": {",
							"            \"$id\": \"#/properties/pagination\",",
							"            \"type\": \"object\",",
							"            \"title\": \"The pagination schema\",",
							"            \"description\": \"An explanation about the purpose of this instance.\",",
							"            \"default\": {},",
							"            \"required\": [",
							"                \"limit\",",
							"                \"offset\",",
							"                \"count\",",
							"                \"total\"",
							"            ],",
							"            \"properties\": {",
							"                \"limit\": {",
							"                    \"$id\": \"#/properties/pagination/properties/limit\",",
							"                    \"type\": \"integer\",",
							"                    \"title\": \"The limit schema\",",
							"                    \"description\": \"An explanation about the purpose of this instance.\",",
							"                    \"default\": 0,",
							"                    \"examples\": [",
							"                        25",
							"                    ]",
							"                },",
							"                \"offset\": {",
							"                    \"$id\": \"#/properties/pagination/properties/offset\",",
							"                    \"type\": \"integer\",",
							"                    \"title\": \"The offset schema\",",
							"                    \"description\": \"An explanation about the purpose of this instance.\",",
							"                    \"default\": 0,",
							"                    \"examples\": [",
							"                        0",
							"                    ]",
							"                },",
							"                \"count\": {",
							"                    \"$id\": \"#/properties/pagination/properties/count\",",
							"                    \"type\": \"integer\",",
							"                    \"title\": \"The count schema\",",
							"                    \"description\": \"An explanation about the purpose of this instance.\",",
							"                    \"default\": 0,",
							"                    \"examples\": [",
							"                        25",
							"                    ]",
							"                },",
							"                \"total\": {",
							"                    \"$id\": \"#/properties/pagination/properties/total\",",
							"                    \"type\": \"integer\",",
							"                    \"title\": \"The total schema\",",
							"                    \"description\": \"An explanation about the purpose of this instance.\",",
							"                    \"default\": 0,",
							"                    \"examples\": [",
							"                        10000",
							"                    ]",
							"                }",
							"            },",
							"            \"additionalProperties\": true",
							"        },",
							"        \"data\": {",
							"            \"$id\": \"#/properties/data\",",
							"            \"type\": \"array\",",
							"            \"title\": \"The data schema\",",
							"            \"description\": \"An explanation about the purpose of this instance.\",",
							"            \"default\": [],",
							"            \"examples\": [",
							"                [",
							"                    {",
							"                        \"author\": \"Hala Abdallah\",",
							"                        \"title\": \"Taliban says its purge of officials unrelated to sanctioned ministers \",",
							"                        \"description\": \"The Taliban appointed ministers sanctioned by the US in its interim government. The Taliban has refused calls by the international community to remove ministers from its interim government under US and UN sanction threats, a senior official said according to a Sputnik report. In comments made to the Russian outlet, Taliban Spokesman Mohammad Naeem confirmed [&#8230;](The post Taliban says its purge of officials unrelated to sanctioned ministers  is from Doha News | Qatar.)\",",
							"                        \"url\": \"http://feedproxy.google.com/~r/DohaNews/~3/_3OlD8mmIAA/\",",
							"                        \"source\": \"Doha News\",",
							"                        \"image\": null,",
							"                        \"category\": \"general\",",
							"                        \"language\": \"ar\",",
							"                        \"country\": \"qa\",",
							"                        \"published_at\": \"2021-10-13T13:15:39+00:00\"",
							"                    }",
							"                ]",
							"            ],",
							"            \"additionalItems\": true,",
							"            \"items\": {",
							"                \"$id\": \"#/properties/data/items\",",
							"                \"anyOf\": [",
							"                    {",
							"                        \"$id\": \"#/properties/data/items/anyOf/0\",",
							"                        \"type\": \"object\",",
							"                        \"title\": \"The first anyOf schema\",",
							"                        \"description\": \"An explanation about the purpose of this instance.\",",
							"                        \"default\": {},",
							"                        \"examples\": [",
							"                            {",
							"                                \"author\": \"Hala Abdallah\",",
							"                                \"title\": \"Taliban says its purge of officials unrelated to sanctioned ministers \",",
							"                                \"description\": \"The Taliban appointed ministers sanctioned by the US in its interim government. The Taliban has refused calls by the international community to remove ministers from its interim government under US and UN sanction threats, a senior official said according to a Sputnik report. In comments made to the Russian outlet, Taliban Spokesman Mohammad Naeem confirmed [&#8230;](The post Taliban says its purge of officials unrelated to sanctioned ministers  is from Doha News | Qatar.)\",",
							"                                \"url\": \"http://feedproxy.google.com/~r/DohaNews/~3/_3OlD8mmIAA/\",",
							"                                \"source\": \"Doha News\",",
							"                                \"image\": null,",
							"                                \"category\": \"general\",",
							"                                \"language\": \"ar\",",
							"                                \"country\": \"qa\",",
							"                                \"published_at\": \"2021-10-13T13:15:39+00:00\"",
							"                            }",
							"                        ],",
							"                        \"required\": [",
							"                            \"author\",",
							"                            \"title\",",
							"                            \"description\",",
							"                            \"url\",",
							"                            \"source\",",
							"                            \"image\",",
							"                            \"category\",",
							"                            \"language\",",
							"                            \"country\",",
							"                            \"published_at\"",
							"                        ],",
							"                        \"properties\": {",
							"                            \"author\": {",
							"                                \"$id\": \"#/properties/data/items/anyOf/0/properties/author\",",
							"                                \"type\": \"string\" | \"null\" | null,",
							"                                \"title\": \"The author schema\",",
							"                                \"description\": \"An explanation about the purpose of this instance.\",",
							"                                \"default\": \"\",",
							"                                \"examples\": [",
							"                                    \"Hala Abdallah\"",
							"                                ]",
							"                            },",
							"                            \"title\": {",
							"                                \"$id\": \"#/properties/data/items/anyOf/0/properties/title\",",
							"                                \"type\": \"string\",",
							"                                \"title\": \"The title schema\",",
							"                                \"description\": \"An explanation about the purpose of this instance.\",",
							"                                \"default\": \"\",",
							"                                \"examples\": [",
							"                                    \"Taliban says its purge of officials unrelated to sanctioned ministers \"",
							"                                ]",
							"                            },",
							"                            \"description\": {",
							"                                \"$id\": \"#/properties/data/items/anyOf/0/properties/description\",",
							"                                \"type\": \"string\" | \"null\" | null,",
							"                                \"title\": \"The description schema\",",
							"                                \"description\": \"An explanation about the purpose of this instance.\",",
							"                                \"default\": \"\",",
							"                                \"examples\": [",
							"                                    \"The Taliban appointed ministers sanctioned by the US in its interim government. The Taliban has refused calls by the international community to remove ministers from its interim government under US and UN sanction threats, a senior official said according to a Sputnik report. In comments made to the Russian outlet, Taliban Spokesman Mohammad Naeem confirmed [&#8230;](The post Taliban says its purge of officials unrelated to sanctioned ministers  is from Doha News | Qatar.)\"",
							"                                ]",
							"                            },",
							"                            \"url\": {",
							"                                \"$id\": \"#/properties/data/items/anyOf/0/properties/url\",",
							"                                \"type\": \"string\" | \"null\" | null,",
							"                                \"title\": \"The url schema\",",
							"                                \"description\": \"An explanation about the purpose of this instance.\",",
							"                                \"default\": \"\",",
							"                                \"examples\": [",
							"                                    \"http://feedproxy.google.com/~r/DohaNews/~3/_3OlD8mmIAA/\"",
							"                                ]",
							"                            },",
							"                            \"source\": {",
							"                                \"$id\": \"#/properties/data/items/anyOf/0/properties/source\",",
							"                                \"type\": \"string\" | \"null\" | null,",
							"                                \"title\": \"The source schema\",",
							"                                \"description\": \"An explanation about the purpose of this instance.\",",
							"                                \"default\": \"\",",
							"                                \"examples\": [",
							"                                    \"Doha News\"",
							"                                ]",
							"                            },",
							"                            \"image\": {",
							"                                \"$id\": \"#/properties/data/items/anyOf/0/properties/image\",",
							"                                \"type\": \"null\" | \"string\" | null,",
							"                                \"title\": \"The image schema\",",
							"                                \"description\": \"An explanation about the purpose of this instance.\",",
							"                                \"default\": null,",
							"                                \"examples\": [",
							"                                    null",
							"                                ]",
							"                            },",
							"                            \"category\": {",
							"                                \"$id\": \"#/properties/data/items/anyOf/0/properties/category\",",
							"                                \"type\": \"string\" | \"null\" | null,",
							"                                \"title\": \"The category schema\",",
							"                                \"description\": \"An explanation about the purpose of this instance.\",",
							"                                \"default\": \"\",",
							"                                \"examples\": [",
							"                                    \"general\"",
							"                                ]",
							"                            },",
							"                            \"language\": {",
							"                                \"$id\": \"#/properties/data/items/anyOf/0/properties/language\",",
							"                                \"type\": \"string\" | \"null\" | null,",
							"                                \"title\": \"The language schema\",",
							"                                \"description\": \"An explanation about the purpose of this instance.\",",
							"                                \"default\": \"\",",
							"                                \"examples\": [",
							"                                    \"ar\"",
							"                                ]",
							"                            },",
							"                            \"country\": {",
							"                                \"$id\": \"#/properties/data/items/anyOf/0/properties/country\",",
							"                                \"type\": \"string\" | \"null\" | null,",
							"                                \"title\": \"The country schema\",",
							"                                \"description\": \"An explanation about the purpose of this instance.\",",
							"                                \"default\": \"\",",
							"                                \"examples\": [",
							"                                    \"qa\"",
							"                                ]",
							"                            },",
							"                            \"published_at\": {",
							"                                \"$id\": \"#/properties/data/items/anyOf/0/properties/published_at\",",
							"                                \"type\": \"string\" | \"null\" | null,",
							"                                \"title\": \"The published_at schema\",",
							"                                \"description\": \"An explanation about the purpose of this instance.\",",
							"                                \"default\": \"\",",
							"                                \"examples\": [",
							"                                    \"2021-10-13T13:15:39+00:00\"",
							"                                ]",
							"                            }",
							"                        },",
							"                        \"additionalProperties\": true",
							"                    }",
							"                ]",
							"            }",
							"        }",
							"    },",
							"    \"additionalProperties\": true",
							"}",
							"",
							"pm.test(\"Schema Validation\", function(){",
							"    var result=tv4.validateResult(pm.response.json(), schema);",
							"    if(!result.valid){",
							"        console.log(result);",
							"",
							"    }",
							"    pm.expect(result.valid).to.be.true;",
							"});",
							"",
							"var response_json = pm.response.json();",
							"",
							"pm.test(\"Verify the Paginagtion settings \", function () {",
							"   pm.expect(response_json.pagination.limit).to.eql(25);",
							"   pm.expect(response_json.pagination.offset).to.eql(0);",
							"   pm.expect(response_json.pagination.count).to.eql(25);",
							"   pm.expect(response_json.pagination.total).to.eql(10000);",
							"});",
							"",
							"pm.test(\"Verify the data exists \", function () {",
							"   pm.expect(response_json.data.length).is.not.null;",
							"  ",
							"});",
							"",
							"",
							"",
							"postman.setNextRequest(\"[Live_News]Verify error message for wrong API key\");",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}?access_key={{api_key}}",
					"host": [
						"{{url}}"
					],
					"query": [
						{
							"key": "access_key",
							"value": "{{api_key}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "[Live_News]Verify error message for wrong API key",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"",
							"pm.test(\"Status code is 401 : Unauthorized\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							" var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
							" ",
							" tests[\"Verify Content-Type\"] = contentTypeHeaderExists;",
							" ",
							" if (contentTypeHeaderExists) {",
							"     tests[\"Verify Content-Type is application/json\"] = ",
							"       responseHeaders[\"Content-Type\"].has(\"application/json\");",
							" }",
							"",
							"",
							"var response_json = pm.response.json();",
							"",
							"pm.test(\"Verify the error code for invalid access key \", function () {",
							"   pm.expect(response_json.error.code).to.eql(\"invalid_access_key\");",
							"});",
							"",
							"pm.test(\"Verify the error message for invalid access key \", function () {",
							"   pm.expect(response_json.error.message).to.eql(\"You have not supplied a valid API Access Key.\");",
							"});",
							"",
							"postman.setNextRequest(\"[Live_News]Verify error message for without API key\");",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}?access_key=eedewdw",
					"host": [
						"{{url}}"
					],
					"query": [
						{
							"key": "access_key",
							"value": "eedewdw"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "[Live_News]Verify error message for without API key",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"",
							"pm.test(\"Status code is 401 : Unauthorized\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							" var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
							" ",
							" tests[\"Verify Content-Type\"] = contentTypeHeaderExists;",
							" ",
							" if (contentTypeHeaderExists) {",
							"     tests[\"Verify Content-Type is application/json\"] = ",
							"       responseHeaders[\"Content-Type\"].has(\"application/json\");",
							" }",
							"",
							"",
							"var response_json = pm.response.json();",
							"",
							"",
							"pm.test(\"Verify the error code for invalid access key \", function () {",
							"   pm.expect(response_json.error.code).to.eql(\"missing_access_key\");",
							"});",
							"",
							"pm.test(\"Verify the error message for invalid access key \", function () {",
							"   pm.expect(response_json.error.message).to.eql(\"You have not supplied an API Access Key. [Required format: access_key=YOUR_ACCESS_KEY]\");",
							"});",
							"",
							"",
							"postman.setNextRequest(\"[Live_News]Verify response by include filter from country\");",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}",
					"host": [
						"{{url}}"
					],
					"query": [
						{
							"key": "access_key",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "[Live_News]Verify response by include filter from country",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							" var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
							" ",
							" tests[\"Verify Content-Type\"] = contentTypeHeaderExists;",
							" ",
							" if (contentTypeHeaderExists) {",
							"     tests[\"Verify Content-Type is application/json\"] = ",
							"       responseHeaders[\"Content-Type\"].has(\"application/json\");",
							" }",
							"",
							"",
							"var response_json = pm.response.json();",
							"",
							"pm.test(\"Verify the Paginagtion settings \", function () {",
							"   pm.expect(response_json.pagination.limit).to.eql(25);",
							"   pm.expect(response_json.pagination.offset).to.eql(0);",
							"   pm.expect(response_json.pagination.count).to.eql(25);",
							"   pm.expect(response_json.pagination.total).to.eql(10000);",
							"});",
							"",
							"",
							"var no_of_records = response_json.data.length;",
							"",
							" for (var i = 0; i < no_of_records; i++){",
							"       pm.test(\"Verify the country code of all data is AU \", function () {",
							"         pm.expect(response_json.data[i].country).to.eql(\"au\");",
							"  ",
							"        });",
							" }",
							"",
							" postman.setNextRequest(\"[Live_News]Verify response by exclude filter from country\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}?access_key={{api_key}}&countries=au",
					"host": [
						"{{url}}"
					],
					"query": [
						{
							"key": "access_key",
							"value": "{{api_key}}"
						},
						{
							"key": "countries",
							"value": "au"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "[Live_News]Verify response by exclude filter from country",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							" var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
							" ",
							" tests[\"Verify Content-Type\"] = contentTypeHeaderExists;",
							" ",
							" if (contentTypeHeaderExists) {",
							"     tests[\"Verify Content-Type is application/json\"] = ",
							"       responseHeaders[\"Content-Type\"].has(\"application/json\");",
							" }",
							"",
							"",
							"var response_json = pm.response.json();",
							"",
							"pm.test(\"Verify the Paginagtion settings \", function () {",
							"   pm.expect(response_json.pagination.limit).to.eql(25);",
							"   pm.expect(response_json.pagination.offset).to.eql(0);",
							"   pm.expect(response_json.pagination.count).to.eql(25);",
							"   pm.expect(response_json.pagination.total).to.eql(10000);",
							"});",
							"",
							"",
							"var no_of_records = response_json.data.length;",
							"",
							" for (var i = 0; i < no_of_records; i++){",
							"       pm.test(\"Verify the country code is not AU for any data\", function () {",
							"            pm.expect(response_json.data[i].country).not.to.eql(\"au\");",
							"  ",
							"        });",
							" }",
							"",
							" postman.setNextRequest(\"[Live_News]Verify error response for invalid country code\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}?access_key={{api_key}}&countries=-au",
					"host": [
						"{{url}}"
					],
					"query": [
						{
							"key": "access_key",
							"value": "{{api_key}}"
						},
						{
							"key": "countries",
							"value": "-au"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "[Live_News]Verify error response for invalid country code",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"",
							"pm.test(\"Status code is 401 : Unauthorized\", function () {",
							"    pm.response.to.have.status(422);",
							"});",
							"",
							" var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
							" ",
							" tests[\"Verify Content-Type\"] = contentTypeHeaderExists;",
							" ",
							" if (contentTypeHeaderExists) {",
							"     tests[\"Verify Content-Type is application/json\"] = ",
							"       responseHeaders[\"Content-Type\"].has(\"application/json\");",
							" }",
							"",
							"",
							"var response_json = pm.response.json();",
							"",
							"",
							"pm.test(\"Verify the error code for invalid country code \", function () {",
							"     pm.expect(response_json.error.code).to.eql(\"validation_error\");",
							"});",
							"",
							"pm.test(\"Verify the error message for invalid country code \", function () {",
							"   pm.expect(response_json.error.message).to.eql(\"Request failed with validation error\");",
							"});",
							"",
							"",
							"postman.setNextRequest(\"[Live_News]Verify response by include filter from language\");",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}?access_key={{api_key}}&countries=dwdwdwdw",
					"host": [
						"{{url}}"
					],
					"query": [
						{
							"key": "access_key",
							"value": "{{api_key}}"
						},
						{
							"key": "countries",
							"value": "dwdwdwdw"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "[Live_News]Verify response by include filter from language",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							" var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
							" ",
							" tests[\"Verify Content-Type\"] = contentTypeHeaderExists;",
							" ",
							" if (contentTypeHeaderExists) {",
							"     tests[\"Verify Content-Type is application/json\"] = ",
							"       responseHeaders[\"Content-Type\"].has(\"application/json\");",
							" }",
							"",
							"",
							"var response_json = pm.response.json();",
							"",
							"pm.test(\"Verify the Paginagtion settings \", function () {",
							"   pm.expect(response_json.pagination.limit).to.eql(25);",
							"   pm.expect(response_json.pagination.offset).to.eql(0);",
							"   pm.expect(response_json.pagination.count).to.eql(25);",
							"   pm.expect(response_json.pagination.total).to.eql(3767);",
							"});",
							"",
							"",
							"var no_of_records = response_json.data.length;",
							"",
							" for (var i = 0; i < no_of_records; i++){",
							"       pm.test(\"Verify the language code of all data is AR \", function () {",
							"         pm.expect(response_json.data[i].language).to.eql(\"ar\");",
							"  ",
							"        });",
							" }",
							"",
							" postman.setNextRequest(\"[Live_News]Verify response by exclude filter from language\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}?access_key={{api_key}}&languages=ar",
					"host": [
						"{{url}}"
					],
					"query": [
						{
							"key": "access_key",
							"value": "{{api_key}}"
						},
						{
							"key": "languages",
							"value": "ar"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "[Live_News]Verify response by exclude filter from language",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							" var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
							" ",
							" tests[\"Verify Content-Type\"] = contentTypeHeaderExists;",
							" ",
							" if (contentTypeHeaderExists) {",
							"     tests[\"Verify Content-Type is application/json\"] = ",
							"       responseHeaders[\"Content-Type\"].has(\"application/json\");",
							" }",
							"",
							"",
							"var response_json = pm.response.json();",
							"",
							"pm.test(\"Verify the Paginagtion settings \", function () {",
							"   pm.expect(response_json.pagination.limit).to.eql(25);",
							"   pm.expect(response_json.pagination.offset).to.eql(0);",
							"   pm.expect(response_json.pagination.count).to.eql(25);",
							"   pm.expect(response_json.pagination.total).to.eql(10000);",
							"});",
							"",
							"",
							"var no_of_records = response_json.data.length;",
							"",
							" for (var i = 0; i < no_of_records; i++){",
							"       pm.test(\"Verify the language code is not equal to AR in any data of the set\", function () {",
							"            pm.expect(response_json.data[i].language).not.to.eql(\"ar\");",
							"  ",
							"        });",
							" }",
							"",
							" postman.setNextRequest(\"[Live_News]Verify response by include filter from source\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}?access_key={{api_key}}&languages=-ar",
					"host": [
						"{{url}}"
					],
					"query": [
						{
							"key": "access_key",
							"value": "{{api_key}}"
						},
						{
							"key": "languages",
							"value": "-ar"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "[Live_News]Verify response by include filter from source",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							" var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
							" ",
							" tests[\"Verify Content-Type\"] = contentTypeHeaderExists;",
							" ",
							" if (contentTypeHeaderExists) {",
							"     tests[\"Verify Content-Type is application/json\"] = ",
							"       responseHeaders[\"Content-Type\"].has(\"application/json\");",
							" }",
							"",
							"",
							"var response_json = pm.response.json();",
							"",
							"pm.test(\"Verify the Paginagtion settings \", function () {",
							"   pm.expect(response_json.pagination.limit).to.eql(25);",
							"   pm.expect(response_json.pagination.offset).to.eql(0);",
							"   pm.expect(response_json.pagination.count).to.eql(25);",
							"   pm.expect(response_json.pagination.total).to.eql(10000);",
							"});",
							"",
							"",
							"var no_of_records = response_json.data.length;",
							"",
							" for (var i = 0; i < no_of_records; i++){",
							"       pm.test(\"Verify the source  of all data is CNN \", function () {",
							"         pm.expect(response_json.data[i].source).is.include(\"CNN\");",
							"  ",
							"        });",
							" }",
							"",
							" postman.setNextRequest(\"[Live_News]Verify response by exclude filter from source\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}?access_key={{api_key}}&sources=cnn",
					"host": [
						"{{url}}"
					],
					"query": [
						{
							"key": "access_key",
							"value": "{{api_key}}"
						},
						{
							"key": "sources",
							"value": "cnn"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "[Live_News]Verify response by exclude filter from source",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							" var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
							" ",
							" tests[\"Verify Content-Type\"] = contentTypeHeaderExists;",
							" ",
							" if (contentTypeHeaderExists) {",
							"     tests[\"Verify Content-Type is application/json\"] = ",
							"       responseHeaders[\"Content-Type\"].has(\"application/json\");",
							" }",
							"",
							"var response_json = pm.response.json();",
							"",
							"pm.test(\"Verify the Paginagtion settings \", function () {",
							"   pm.expect(response_json.pagination.limit).to.eql(25);",
							"   pm.expect(response_json.pagination.offset).to.eql(0);",
							"   pm.expect(response_json.pagination.count).to.eql(25);",
							"   pm.expect(response_json.pagination.total).to.eql(10000);",
							"});",
							"",
							"",
							"var no_of_records = response_json.data.length;",
							"",
							" for (var i = 0; i < no_of_records; i++){",
							"       pm.test(\"Verify the source is not equal to CNN in any data in the set\", function () {",
							"            pm.expect(response_json.data[i].source).not.to.eql(\"bbc\");",
							"  ",
							"        });",
							" }",
							"",
							" postman.setNextRequest(\"[Live_News]Verify response with date filter\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}?access_key={{api_key}}&sources=-bbc",
					"host": [
						"{{url}}"
					],
					"query": [
						{
							"key": "access_key",
							"value": "{{api_key}}"
						},
						{
							"key": "sources",
							"value": "-bbc"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "[Live_News]Verify response with date filter",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							" var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
							" ",
							" tests[\"Verify Content-Type\"] = contentTypeHeaderExists;",
							" ",
							" if (contentTypeHeaderExists) {",
							"     tests[\"Verify Content-Type is application/json\"] = ",
							"       responseHeaders[\"Content-Type\"].has(\"application/json\");",
							" }",
							"",
							"",
							"var response_json = pm.response.json();",
							"",
							"pm.test(\"Verify the Paginagtion settings \", function () {",
							"   pm.expect(response_json.pagination.limit).to.eql(25);",
							"   pm.expect(response_json.pagination.offset).to.eql(0);",
							"   pm.expect(response_json.pagination.count).to.eql(25);",
							"   pm.expect(response_json.pagination.total).to.eql(10000);",
							"});",
							"",
							"",
							"var no_of_records = response_json.data.length;",
							"",
							" for (var i = 0; i < no_of_records; i++){",
							"       pm.test(\"Verify the data set if filtered from published date 2022-01-30\", function () {",
							"            pm.expect(response_json.data[i].published_at).to.include(\"2022-01-30\");",
							"  ",
							"        });",
							" }",
							"",
							" postman.setNextRequest(\"[Live_News]Verify response by include filter from category\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}?access_key={{api_key}}&date=2022-01-30",
					"host": [
						"{{url}}"
					],
					"query": [
						{
							"key": "access_key",
							"value": "{{api_key}}"
						},
						{
							"key": "date",
							"value": "2022-01-30"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "[Live_News]Verify response by include filter from category",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							" var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
							" ",
							" tests[\"Verify Content-Type\"] = contentTypeHeaderExists;",
							" ",
							" if (contentTypeHeaderExists) {",
							"     tests[\"Verify Content-Type is application/json\"] = ",
							"       responseHeaders[\"Content-Type\"].has(\"application/json\");",
							" }",
							"",
							"",
							"var response_json = pm.response.json();",
							"var no_of_records = response_json.data.length;",
							"",
							" for (var i = 0; i < no_of_records; i++){",
							"       pm.test(\"Verify the category  of all data is health \", function () {",
							"         pm.expect(response_json.data[i].category).to.eql(\"health\");",
							"  ",
							"        });",
							" }",
							"",
							"",
							"postman.setNextRequest(\"[Live_News]Verify response by exclude filter from category\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}?access_key={{api_key}}&categories=health",
					"host": [
						"{{url}}"
					],
					"query": [
						{
							"key": "access_key",
							"value": "{{api_key}}"
						},
						{
							"key": "categories",
							"value": "health"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "[Live_News]Verify response by exclude filter from category",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							" var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
							" ",
							" tests[\"Verify Content-Type\"] = contentTypeHeaderExists;",
							" ",
							" if (contentTypeHeaderExists) {",
							"     tests[\"Verify Content-Type is application/json\"] = ",
							"       responseHeaders[\"Content-Type\"].has(\"application/json\");",
							" }",
							"",
							"",
							"var response_json = pm.response.json();",
							"var no_of_records = response_json.data.length;",
							"",
							"for (var i = 0; i < no_of_records; i++){",
							"       pm.test(\"Verify there is no data from health category\", function () {",
							"            pm.expect(response_json.data[i].category).not.to.eql(\"health\");",
							"  ",
							"        });",
							" }",
							"",
							"",
							"postman.setNextRequest(\"[Live_News]Verify error response for invalid category\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}?access_key={{api_key}}&categories=-health",
					"host": [
						"{{url}}"
					],
					"query": [
						{
							"key": "access_key",
							"value": "{{api_key}}"
						},
						{
							"key": "categories",
							"value": "-health"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "[Live_News]Verify error response for invalid category",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(422);",
							"});",
							"",
							" var contentTypeHeaderExists = responseHeaders.hasOwnProperty(\"Content-Type\");",
							" ",
							" tests[\"Verify Content-Type\"] = contentTypeHeaderExists;",
							" ",
							" if (contentTypeHeaderExists) {",
							"     tests[\"Verify Content-Type is application/json\"] = ",
							"       responseHeaders[\"Content-Type\"].has(\"application/json\");",
							" }",
							"",
							"",
							"var response_json = pm.response.json();",
							"var tz = pm.response.json();",
							"",
							"pm.test(\"Verify the error code for invalid category type\", function () {",
							"     pm.expect(response_json.error.code).to.eql(\"validation_error\");",
							"});",
							"",
							"pm.test(\"Verify the error message for invalid category type\", function () {",
							"   pm.expect(response_json.error.message).to.eql(\"Request failed with validation error\");",
							"});",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://api.mediastack.com/v1/news?access_key={{api_key}}&categories=dwdwd",
					"protocol": "http",
					"host": [
						"api",
						"mediastack",
						"com"
					],
					"path": [
						"v1",
						"news"
					],
					"query": [
						{
							"key": "access_key",
							"value": "{{api_key}}"
						},
						{
							"key": "categories",
							"value": "dwdwd"
						}
					]
				}
			},
			"response": []
		}
	]
}